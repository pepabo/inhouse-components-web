@use "sass:map";
@use "@inhouse/adapter/functions" as adapter;
@use "@inhouse/skeleton/mixins" as skeleton;
@use "./variables";

@mixin style($option: variables.$default-option) {
  $option: map.merge(variables.$default-option, $option);

  box-sizing: border-box;
  width: adapter.get-avatar-width($level: map.get($option, size));
  height: adapter.get-avatar-height($level: map.get($option, size));
  overflow: hidden;
  background-color: adapter.get-avatar-surface-color();
  border: adapter.get-avatar-border-size() solid adapter.get-avatar-border-color();
  border-radius: adapter.get-avatar-radius-size($level: map.get($option, size));

  @each $size in adapter.get-avatar-sizes() {
    &.-size-#{$size} {
      width: adapter.get-avatar-width($level: $size);
      height: adapter.get-avatar-height($level: $size);
      border-radius: adapter.get-avatar-radius-size($level: $size);
    }
  }

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

@mixin skeleton-style($option: variables.$default-option) {
  $option: map.merge(variables.$default-option, $option);

  @include skeleton.style;

  width: adapter.get-avatar-width($level: map.get($option, size));
  height: adapter.get-avatar-height($level: map.get($option, size));
  border-radius: adapter.get-avatar-radius-size($level: map.get($option, size));

  @each $size in adapter.get-avatar-sizes() {
    &.-size-#{$size} {
      width: adapter.get-avatar-width($level: $size);
      height: adapter.get-avatar-height($level: $size);
      border-radius: adapter.get-avatar-radius-size($level: $size);
    }
  }
}

@mixin export {
  .in-avatar {
    @include style;
  }

  .in-skeleton-avatar {
    @include skeleton-style;
  }
}
