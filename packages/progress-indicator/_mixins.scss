@use "sass:map";
@use "sass:math";
@use "@pepabo-inhouse/icon/mixins" as icon;
@use "@pepabo-inhouse/adapter/functions" as adapter;
@use "./variables";

@mixin linear($option: variables.$default-option) {
  $option: map.merge(variables.$default-option, $option);

  position: relative;
  display: block;
  width: 100%;
  height: adapter.get-progress-indicator-border-size();
  overflow: hidden;
  background-color: adapter.get-progress-indicator-track-surface-color();

  &[aria-valuenow] > * {
    height: adapter.get-progress-indicator-border-size();
    background-color: adapter.get-progress-indicator-indicator-surface-color();
  }

  @for $i from 0 to 100 {
    &[aria-valuenow][data-percentage="#{$i}"] > * {
      width: math.percentage(math.div($i, 100));
    }
  }

  &:not([aria-valuenow]) > * {
    &::before,
    &::after {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      background-color: adapter.get-progress-indicator-indicator-surface-color();
      content: "";
      will-change: left, right;
    }

    &::before {
      animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    }

    &::after {
      animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
      animation-delay: 1.15s;
    }
  }
}

@property --circular-start-point {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 0%;
}

@property --circular-percentage {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@mixin circular($option: variables.$default-option) {
  --circular-color: #{adapter.get-progress-indicator-indicator-surface-color()};
  --circular-size: #{adapter.get-progress-indicator-border-size($size: m)};

  position: relative;
  width: adapter.get-circular-progress-indicator-width();
  height: adapter.get-circular-progress-indicator-height();

  &::after {
    --circular-start-point: 0%;
    --circular-percentage: 100%;

    position: absolute;
    inset: adapter.get-spacing-size($level: xxs);
    display: block;
    box-sizing: border-box;
    margin: auto;
    background:
      conic-gradient(
        transparent var(--circular-start-point),
        var(--circular-color) var(--circular-start-point),
        var(--circular-color) var(--circular-percentage),
        transparent 0
      );
    border-radius: 50%;
    transition: --circular-percentage 0.1s ease;
    content: "";
    mask-image:
      radial-gradient(
        closest-side,
        transparent calc(100% - var(--circular-size) - 0.5px),
        rgba(0, 0, 0, 50%) calc(100% - var(--circular-size) - 0.25px),
        black calc(100% - var(--circular-size)) 100%
      );
    aspect-ratio: 1;
  }

  &.-is-parent-color {
    &::after {
      --circular-color: currentcolor;
    }
  }

  @each $size in "s", "m", "l" {
    &.-size-#{$size} {
      @include -size-style($size);
    }
  }

  @for $i from 0 to 100 {
    &[data-percentage="#{$i}"]::after {
      --circular-percentage: #{$i * 1%};
    }
  }

  &:not([aria-valuenow]),
  &[aria-valuenow=""] {
    &::after {
      animation: circular-indeterminate 2s linear infinite, circular-indeterminate-rotate 2s linear infinite;
    }
  }
}

@keyframes indeterminate {
  0% {
    right: 100%;
    left: -35%;
  }

  60% {
    right: -90%;
    left: 100%;
  }

  100% {
    right: -90%;
    left: 100%;
  }
}

@keyframes indeterminate-short {
  0% {
    right: 100%;
    left: -200%;
  }

  60% {
    right: -8%;
    left: 107%;
  }

  100% {
    right: -8%;
    left: 107%;
  }
}

@keyframes circular-indeterminate-rotate {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

@keyframes circular-indeterminate {
  0% {
    --circular-start-point: 0%;
    --circular-percentage: 0%;
  }

  50% {
    --circular-start-point: 0%;
    --circular-percentage: 100%;
  }

  100% {
    --circular-start-point: 100%;
    --circular-percentage: 100%;
  }
}

@mixin -size-style($size) {
  &::after {
    --circular-size: #{adapter.get-progress-indicator-border-size($size)};
  }
}

@mixin export {
  .in-linear-progress-indicator {
    @include linear;
  }

  .in-circular-progress-indicator {
    @include circular;
  }
}
