@use "sass:map";
@use "sass:list";
@use "@pepabo-inhouse/adapter/functions" as adapter;
@use "@pepabo-inhouse/button" as button;
@use "./variables";

@mixin style($options: variables.$default-options) {
  $options: map.merge(variables.$default-options, $options);

  display: flex;
  gap: adapter.get-spacing-size(s);
  box-shadow: adapter.get-elevation-box-shadow(1);

  ._leading {
    line-height: inherit;
  }

  ._body {
    display: flex;
    flex-direction: column;
    justify-content: center;
    margin: 0;
  }

  ._title {
    margin-block: 0;
  }

  ._content > *:first-child {
    margin-block-start: 0;
  }

  ._content > *:last-child {
    margin-block-end: 0;
  }

  ._trailing {
    margin-left: auto;
  }

  @include -state-style(map.get($options, color));
  @include -size-style(map.get($options, size));

  &.-color-informative {
    @include -state-style(informative);
  }

  &.-color-positive {
    @include -state-style(positive);
  }

  &.-color-negative {
    @include -state-style(negative);
  }

  &.-color-notice {
    @include -state-style(notice);
  }

  @each $size in "s", "m", "l" {
    &.-size-#{$size} {
      @include -size-style($size);
    }
  }
}

@mixin -state-style($state) {
  color: adapter.get-semantic-color($state, 800);
  background-color: adapter.get-semantic-color($state, 100);

  ._leading::after {
    content: map.get(variables.$icon-map, $state);
  }
}

@mixin -size-style($size) {
  padding-block: calc(adapter.get-spacing-size($size) / 2);
  padding-inline: adapter.get-spacing-size($size) calc(adapter.get-spacing-size($size) / 2);
  border-radius: adapter.get-radius-size($size);

  ._leading {
    font-size: adapter.get-font-size($size);
    line-height: adapter.get-line-height($level: $size, $density: normal);
    padding-block: calc((adapter.get-interactive-component-height($level: $size) - adapter.get-line-height($level: $size, $density: normal)) / 2);
  }

  ._body {
    gap: adapter.get-spacing-size(map.get(variables.$title-margin-map, $size));
    font-size: adapter.get-font-size($size);
    line-height: adapter.get-line-height($level: $size, $density: normal);
    padding-block: calc((adapter.get-interactive-component-height($level: $size) - adapter.get-line-height($level: $size, $density: normal)) / 2);
  }

  ._trailing {
    ._action {
      @include button.style(
        $options: (
          size: $size,
          appearance: transparent,
        )
      );
    }
  }
}

@mixin export {
  .in-callout {
    @include style;
  }
}
