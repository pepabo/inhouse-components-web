@use "sass:map";
@use "sass:list";
@use "@pepabo-inhouse/adapter/mixins" as adapter-mixins;
@use "@pepabo-inhouse/adapter/functions" as adapter-functions;
@use "./variables";
@use "./functions";

@mixin row($options: variables.$default-row-option) {
  $options: map.merge(variables.$default-row-option, $options);

  display: grid;
  grid-template-columns: repeat(12, 1fr);
  box-sizing: border-box;

  @if map.get($options, direction) == ltr {
    direction: ltr;
  } @else if map.get($options, direction) == rtl {
    direction: rtl;
  }

  @if map.get($options, is-gapless) == true {
    gap: 0;
  } @else if map.get($options, is-gapless) == false {
    gap: functions.compose-col-horizontal-gap(adapter-functions.get-boundary-size-first-key());

    @each $boundary-size-level in adapter-functions.get-boundary-sizes() {
      @include adapter-mixins.mq-boundary(up, $boundary-size-level) {
        gap: functions.compose-col-horizontal-gap($boundary-size-level);
      }
    }

    &.-is-gapless {
      gap: 0;
    }
  }

  @if map.get($options, align-content) == start {
    align-content: start;
  } @else if map.get($options, align-content) == end {
    align-content: end;
  } @else if map.get($options, align-content) == center {
    align-content: center;
  } @else if map.get($options, align-content) == stretch {
    align-content: stretch;
  } @else if map.get($options, align-content) == space-around {
    align-content: space-around;
  } @else if map.get($options, align-content) == space-between {
    align-content: space-between;
  }

  &.-align-content-start {
    align-content: start;
  }

  &.-align-content-end {
    align-content: end;
  }

  &.-align-content-center {
    align-content: center;
  }

  &.-align-content-stretch {
    align-content: stretch;
  }

  &.-align-content-space-around {
    align-content: space-around;
  }

  &.-align-content-space-between {
    align-content: space-between;
  }

  @if map.get($options, justify-content) == start {
    justify-content: start;
  } @else if map.get($options, justify-content) == end {
    justify-content: end;
  } @else if map.get($options, justify-content) == center {
    justify-content: center;
  } @else if map.get($options, justify-content) == stretch {
    justify-content: stretch;
  } @else if map.get($options, justify-content) == space-around {
    justify-content: space-around;
  } @else if map.get($options, justify-content) == space-between {
    justify-content: space-between;
  }

  &.-justify-content-start {
    justify-content: start;
  }

  &.-justify-content-end {
    justify-content: end;
  }

  &.-justify-content-center {
    justify-content: center;
  }

  &.-justify-content-stretch {
    justify-content: stretch;
  }

  &.-justify-content-space-around {
    justify-content: space-around;
  }

  &.-justify-content-space-between {
    justify-content: space-between;
  }
}

@mixin col($options: variables.$default-col-option) {
  $options: map.merge(variables.$default-col-option, $options);

  box-sizing: border-box;
  width: 100%;
  max-width: 100%;

  @for $i from 1 through variables.$total-col-count {
    &.-col-#{$i} {
      @include -grid-column($i);

      @for $offset from 0 through (variables.$total-col-count - 1) {
        &.-offset-#{$offset} {
          @include -grid-column($i, $offset);
        }
      }
    }
  }

  @each $boundary-size-level in adapter-functions.get-boundary-sizes() {
    @include adapter-mixins.mq-boundary(up, $boundary-size-level) {
      @for $i from 1 through variables.$total-col-count {
        &.-col-#{$boundary-size-level}-#{$i} {
          @include -grid-column($i);

          @for $offset from 0 through (variables.$total-col-count - 1) {
            &.-offset-#{$boundary-size-level}-#{$offset} {
              @include -grid-column($i, $offset);
            }
          }
        }
      }
    }
  }

  @include -grid-column($count: map.get($options, count), $offset: map.get($options, offset));
}

@mixin export {
  .in-row {
    @include row;
  }

  .in-col {
    @include col;
  }
}

@mixin -grid-column($count, $offset: 0) {
  @if $offset != null and $offset > 0 {
    grid-column: ($offset + 1)  / span $count;
  } @else {
    grid-column: span $count;
  }
}
