@use "sass:map";
@use "sass:list";
@use "@pepabo-inhouse/adapter" as adapter;
@use "@pepabo-inhouse/cell" as cell;
@use "./variables";

@mixin style($options: variables.$default-option) {
  $options: map.merge(variables.$default-option, $options);

  ._list {
    border-block-end: adapter.get-border-size($level: m) solid adapter.get-border-color($brightness: light, $name: high_emphasis);
    display: flex;
    justify-content: map.get($options, align);
    gap: adapter.get-spacing-size(xs);
  }

  @each $align in variables.$available-align {
    &.-align-#{$align} {
      ._list {
        justify-content: $align;
      }
    }
  }

  @if map.get($options, isGapless) == true {
    @include -is-gapless;
  }

  &.-is-gapless {
    @include -is-gapless;
  }

  ._item {
    position: relative;
    top: adapter.get-border-size($level: m);
    margin: 0;
    padding-inline: adapter.get-spacing-size(m);
    @include cell.style((density: map.get($options, density), size: map.get($options, size)));
    border-top-left-radius: adapter.get-radius-size($level: m);
    border-top-right-radius: adapter.get-radius-size($level: m);
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    color: adapter.get-text-color($brightness: light, $name: high_emphasis);
    outline: none;
    font-weight: bold;

    &:not(.--activated) {
      cursor: pointer;
    }

    &:focus-visible ._body {
      outline: adapter.get-focus-ring-outline();
      outline-offset: adapter.get-focus-ring-outline-offset();
    }
  }

  @include -appearance-rule($appearance: map.get($options, appearance));

  @each $appearance in variables.$available-appearance {
    &.-appearance-#{$appearance} {
      @include -appearance-rule($appearance: $appearance);
    }
  }

  ._panel {
    width: 100%;
    overflow: auto;

    &:focus-visible {
      outline: adapter.get-focus-ring-outline();
      outline-offset: adapter.get-focus-ring-outline-offset();
    }

    &:not(.--activated) {
      display: none;
    }
  }

  @each $density in adapter.get-densities() {
    &.-density-#{$density} {
      ._item {
        @include cell.style((density: $density, size: map.get($options, size)));
      }
    }
  }

  @each $size in adapter.get-cell-sizes() {
    &.-size-#{$size} {
      ._item {
        @include cell.style((density: map.get($options, density), size: $size));
      }
    }
  }

  @each $density in adapter.get-densities() {
    @each $size in adapter.get-cell-sizes() {
      &.-density-#{$density}.-size-#{$size} {
        ._item {
          @include cell.style((density: $density, size: $size));
        }
      }
    }
  }
}

@mixin export {
  .in-tab {
    @include style;
  }
}

@mixin -appearance-rule($appearance: "transparent") {
  @if $appearance == "transparent" {
    ._item {
      background: transparent;
      border: none;
      &::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: adapter.get-border-size($level: xl);
        background: transparent;
      }
      &.--activated {
        &::after {
          background: adapter.get-border-color($brightness: light, $name: high_emphasis);
        }
      }
      &:not(.--activated) {
        &:hover {
          background: adapter.get-background-overlay-color($brightness: light, $state: hover);
        }
        &:active {
          background: adapter.get-background-overlay-color($brightness: light, $state: active);
        }
      }
    }
  } @else if $appearance == "outlined" {
    ._item {
      background: adapter.get-surface-color(light, secondary);
      border: adapter.get-border-size($level: m) solid adapter.get-border-color($brightness: light, $name: high_emphasis);
      &::after {
        display: none;
      }
      &.--activated {
        background: adapter.get-surface-color(light, primary);
        border-block-end-color: transparent;
      }
      &:not(.--activated) {
        &:hover {
          background: adapter.get-background-overlay-color($brightness: light, $state: hover);
          border-block-end-color: transparent;
        }
        &:active {
          background: adapter.get-background-overlay-color($brightness: light, $state: active);
          border-block-end-color: transparent;
        }
      }
    }
  }
}

@mixin -is-gapless {
  ._list {
    gap: 0;
  }

  ._item {
    border-radius: 0;

    &:not(:first-child) {
      border-inline-start: none;
      &:not(:last-child) {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }
    }

    &:first-child {
      border-top-left-radius: adapter.get-radius-size($level: m);
      border-top-right-radius: 0;
    }

    &:last-child {
      border-top-right-radius: adapter.get-radius-size($level: m);
      border-top-left-radius: 0;
    }

  }

}
