@use "@pepabo-inhouse/adapter/functions" as adapter;
@use "./variables";
@use "./functions";
@use "sass:math";
@use "sass:map";

// Prettierによるソースコードの整形を優先させて、以下のルールのlintの対象から除外する
/* stylelint-disable declaration-colon-newline-after */
/* stylelint-disable indentation */
/* stylelint-disable scss/operator-no-newline-after */
/* stylelint-disable string-quotes */

@mixin style($options: variables.$default-option) {
  $options: map.merge(variables.$default-option, $options);

  position: relative;
  display: inline-block;
  box-sizing: border-box;

  // width
  width: auto; // stylelint-disable-line order/properties-order
  vertical-align: text-bottom;

  ._input {
    display: block;
    box-sizing: border-box;
    width: 100%;
    font-family: inherit;
    border: none;
    outline: 0;
    transition: adapter.get-transition-value();
    appearance: none;

    &:not([disabled]) {
      cursor: text;
    }

    @include -disabled-rule {
      opacity: adapter.get-disabled-surface-opacity();

      & + ._icon {
        opacity: adapter.get-disabled-surface-opacity();
      }
    }
  }

  &.-icon-before {
    ._icon {
      position: absolute;
      top: 0;
      bottom: 0;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      pointer-events: none;
    }
  }

  textarea._input {
    resize: vertical;
  }

  @include -width-rule(
    $width: map.get($options, width)
  );

  @each $width in functions.get-available-width() {
    &.-width-#{$width} {
      @include -width-rule($width: $width);
    }
  }

  // color
  @include -color-rule(
    $intention: map.get($options, color)
  );

  @each $intention in functions.get-available-semantic-intentions() {
    &.-color-#{$intention} {
      @include -color-rule($intention: $intention);
    }
  }

  // size
  @include -size-rule($level: map.get($options, size));

  @each $level in functions.get-available-sizes() {
    &.-size-#{$level} {
      @include -size-rule($level: $level);
    }
  }

  // appearance
  @include -appearance-rule(
    $appearance: map.get($options, appearance),
    $intention: map.get($options, color)
  );

  @each $appearance in functions.get-available-appearance() {
    &.-appearance-#{$appearance} {
      @each $intention in functions.get-available-semantic-intentions() {
        &.-color-#{$intention} {
          @include -appearance-rule($appearance: $appearance, $intention: $intention);
        }
      }
    }
  }
}

@mixin export {
  .in-textfield {
    @include style;
  }
}

@mixin -hover-rule {
  &:hover,
  &:active,
  &.--hover {
    @content;
  }
}

@mixin -focus-rule {
  &:focus-visible,
  &.--focused {
    @content;
  }
}

@mixin -disabled-rule {
  &:disabled,
  &.--disabled {
    @content;
  }
}

@mixin -width-rule($width: auto) {
  @if $width == auto {
    width: auto;
  } @else if $width == full {
    display: block;
    width: 100%;
    max-width: 100%;
  } @else if $width == half {
    min-width: (100% * 0.5);
  } @else if $width == third {
    min-width: math.div(100%, 3);
  }
}

@mixin -color-rule($intention: neutral) {
  ._input {
    color: adapter.get-text-color($brightness: light, $name: high_emphasis);
    background-color: adapter.get-surface-color($brightness: light, $priority: tertiary);

    &::placeholder {
      color: adapter.get-text-color($brightness: light, $name: low_emphasis);
    }
  }

  ._icon {
    color: adapter.get-text-color($brightness: light, $name: high_emphasis);
  }
}

@mixin -size-rule($level: m) {
  ._input {
    height: adapter.get-interactive-component-height($level: $level);
    padding: #{(adapter.get-interactive-component-height($level: $level) * 0.5) -
      (adapter.get-line-height($level: $level, $density: normal) * 0.5)}
      adapter.get-spacing-size($level: $level);
    font-size: adapter.get-font-size($level: $level);
  }

  textarea._input {
    min-height: adapter.get-interactive-component-height($level: $level);
    line-height: adapter.get-line-height($level: $level, $density: normal);
  }

  &.-icon-before ._input {
    @if $level == s {
      padding-left: #{adapter.get-spacing-size($level: xs) + adapter.get-font-size($level: m) + adapter.get-spacing-size($level: xs)};
    } @else if $level == m {
      padding-left: #{adapter.get-spacing-size($level: s) + adapter.get-font-size($level: m) + adapter.get-spacing-size($level: xs)};
    } @else if $level == l {
      padding-left: #{adapter.get-spacing-size($level: m) + adapter.get-font-size($level: m) + adapter.get-spacing-size($level: xs)};
    }
  }

  &.-icon-before ._icon {
    left: adapter.get-spacing-size($level: s);
    width: adapter.get-font-size($level: $level);
    height: adapter.get-interactive-component-height($level: $level);
    font-size: adapter.get-font-size($level: $level);
  }
}

@mixin -invalid-rule {
  &[aria-invalid="true"],
  &:user-invalid {
    @content;
  }
}

@mixin -appearance-rule($appearance: outlined, $intention: neutral) {
  @if $appearance == outlined {
    ._input {
      background-color: adapter.get-surface-color($brightness: light, $priority: primary);
      border-radius: adapter.get-radius-size($level: m);
      box-shadow: inset 0 0 0 #{adapter.get-border-size($level: m)} #{adapter.get-field-border-color(
          $color: $intention,
          $state: enabled
        )};

      @include -hover-rule {
        box-shadow: inset 0 0 0 #{adapter.get-border-size($level: m)} #{adapter.get-field-border-color(
            $color: $intention,
            $state: hover
          )};
      }

      @include -focus-rule {
        outline: adapter.get-focus-ring-outline();
        outline-offset: adapter.get-focus-ring-outline-offset();
      }

      @include -invalid-rule {
        box-shadow: inset 0 0 0 #{adapter.get-border-size($level: m)} #{adapter.get-field-border-color(
            $color: negative,
            $state: enabled
          )};
      }
    }
  } @else if $appearance == filled {
    ._input {
      background-color: adapter.get-surface-color($brightness: light, $priority: tertiary);
      border-radius: adapter.get-radius-size($level: m) adapter.get-radius-size($level: m) 0 0;
      box-shadow: inset 0 #{0 - adapter.get-border-size($level: m)} 0 0 #{adapter.get-field-border-color(
          $color: $intention,
          $state: enabled
        )};

      @include -hover-rule {
        box-shadow: inset 0 #{0 - adapter.get-border-size($level: m)} 0 0 #{adapter.get-field-border-color(
            $color: $intention,
            $state: hover
          )};
      }

      @include -focus-rule {
        outline: adapter.get-focus-ring-outline();
        outline-offset: adapter.get-focus-ring-outline-offset();
      }

      @include -invalid-rule {
        box-shadow: inset 0 #{0 - adapter.get-border-size($level: m)} 0 0 #{adapter.get-field-border-color(
            $color: negative,
            $state: enabled
          )};
      }
    }
  }
}
